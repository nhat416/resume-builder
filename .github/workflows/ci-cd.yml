name: CI/CD

on:
  push:
    branches: [ main ]
    tags: ['v*']
  workflow_dispatch: {}

jobs:
  build-and-deploy:
    name: Build, push image and deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set image tags
        id: set-tags
        run: |
          IMAGE=nhat416/resume-builder
          echo "IMAGE=${IMAGE}" >> $GITHUB_ENV
          # build whitespace-separated tag list (short tags)
          TAGS="$GITHUB_SHA"
          if [[ "$GITHUB_REF" == "refs/heads/main" ]]; then
            TAGS="$TAGS latest"
          fi
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            REF_NAME=${GITHUB_REF#refs/tags/}
            TAGS="$TAGS ${REF_NAME}"
          fi

          # write tags to a temp file, one per line
          mkdir -p /tmp
          echo "$TAGS" | tr ' ' '\n' > /tmp/tags.txt

          # create a JSON array of fully-qualified tags for buildx using pure bash
          TAG_JSON='['
          FIRST=true
          while IFS= read -r t; do
            if [ "$FIRST" = true ]; then
              FIRST=false
            else
              TAG_JSON+="," 
            fi
            TAG_JSON+="\"${IMAGE}:${t}\""
          done < /tmp/tags.txt
          TAG_JSON+=']'

          echo "tag_list_json=$TAG_JSON" >> $GITHUB_OUTPUT

      - name: Debug: show computed tag list and environment
        run: |
          echo "GITHUB_REF=$GITHUB_REF"
          echo "GITHUB_SHA=$GITHUB_SHA"
          echo "IMAGE=${IMAGE}"
          echo "--- raw tag_list_json ---"
          echo '${{ steps.set-tags.outputs.tag_list_json }}'
          echo "--- parsed tags ---"
          python - <<PY
import json,sys
s = '''${{ steps.set-tags.outputs.tag_list_json }}'''
try:
    js = json.loads(s)
    for t in js:
        print('-', t)
except Exception as e:
    print('failed to parse tag_list_json:', e)
PY

      - name: Debug: docker and buildx info
        run: |
          docker --version || true
          docker buildx version || true
          docker info || true

      - name: Compute build version
        id: version
        run: |
          # ensure full git history for commit count
          git fetch --prune --unshallow || true
          BASE_VERSION=$(node -p "require('./package.json').version")
          COMMIT_COUNT=$(git rev-list --count HEAD)
          APP_VERSION="${BASE_VERSION}+build.${COMMIT_COUNT}"
          echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV

      - name: Build and push Docker image (multi-arch)
        run: |
          set -euxo pipefail
          # prepare tag flags
          TAG_FLAGS=""
          # read JSON array of tags from step output
          TAGS_JSON='${{ steps.set-tags.outputs.tag_list_json }}'
          # use python to parse JSON and print each tag
          for t in $(python - <<PY
import json,sys
js = json.loads(sys.argv[1])
for v in js:
    print(v)
PY
"$TAGS_JSON"); do
            TAG_FLAGS="$TAG_FLAGS --tag $t"
          done

          docker buildx build --builder default \
            --platform linux/amd64,linux/arm64 \
            --build-arg APP_VERSION="${{ env.APP_VERSION }}" \
            $TAG_FLAGS \
            --push .

      - name: Configure kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "$KUBECONFIG_BASE64" | base64 --decode > $HOME/.kube/config
          chmod 600 $HOME/.kube/config
        env:
          KUBECONFIG_BASE64: ${{ secrets.KUBECONFIG }}

      - name: Deploy to Kubernetes
        run: |
          # use bash to run the deploy helper script
          bash k8s/deploy.sh
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
