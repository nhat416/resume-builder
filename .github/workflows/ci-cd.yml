name: CI/CD

on:
  push:
    branches: [ main ]
    tags: ['v*']

jobs:
  build-and-deploy:
    name: Build, push image and deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set image tags
        id: set-tags
        run: |
          echo "IMAGE=nhat416/resume-builder" >> $GITHUB_ENV
          # always push commit SHA tag
          TAGS="${{ github.sha }}"
          # if on main branch, add 'latest'
          if [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
            TAGS="$TAGS\nlatest"
          fi
          # if this is a tag push, add the tag name (semantic version)
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            REF_NAME=${GITHUB_REF#refs/tags/}
            TAGS="$TAGS\n${REF_NAME}"
          fi
          # write newline-separated tags into TAG_LIST env
          echo -e "TAG_LIST=$TAGS" >> $GITHUB_ENV

      - name: Compute build version
        id: version
        run: |
          # ensure full git history for commit count
          git fetch --prune --unshallow || true
          BASE_VERSION=$(node -p "require('./package.json').version")
          COMMIT_COUNT=$(git rev-list --count HEAD)
          APP_VERSION="${BASE_VERSION}+build.${COMMIT_COUNT}"
          echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV

      - name: Build and push Docker image (multi-arch)
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ env.IMAGE }}:${{ env.TAG_LIST }}
          build-args: |
            APP_VERSION=${{ env.APP_VERSION }}

      - name: Configure kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "$KUBECONFIG_BASE64" | base64 --decode > $HOME/.kube/config
          chmod 600 $HOME/.kube/config
        env:
          KUBECONFIG_BASE64: ${{ secrets.KUBECONFIG }}

      - name: Deploy to Kubernetes
        run: |
          # use bash to run the deploy helper script
          bash k8s/deploy.sh
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
